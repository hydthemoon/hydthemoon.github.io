I"9<h2 id="fourier-series--transfrom-review">Fourier Series &amp; Transfrom Review</h2>

<p>보통 이공계 학부생이라면 2학년 즈음에 신호및시스템 수업 혹은 복소함수론 수업에서 푸리에 급수와 변환에 대해 배웠을 것이다. 주인장의 경우 2학년 2학기 때 두 과목을 같이 들었는데, 수학과에서 열린 복소함수론 수업 초반에 Fourier Analysis하면서 좀 보고, 신호 수업에서 계산을 미친듯이 많이 했던 기억이 난다. 어쨋든, Fourier Transform을 간략하게 정리해보자.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left"><center>Time Property</center></th>
      <th style="text-align: center"><center>Periodic</center></th>
      <th style="text-align: right"><center>Nonperiodic</center></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><strong>Continuous</strong></td>
      <td style="text-align: center"><center>Fourier Series</center></td>
      <td style="text-align: right"><center>Fourier Transform</center></td>
    </tr>
    <tr>
      <td style="text-align: left"><strong>Discrete</strong></td>
      <td style="text-align: center"><center>Discrete-Time Fourier Series</center></td>
      <td style="text-align: right"><center> 인스턴스가 소멸할때/GC가 수거할 때 </center></td>
    </tr>
  </tbody>
</table>

<h3 id="fourier-series">Fourier Series</h3>

\[x(t) = \sum_{k=-\infty}^{\infty} X[k] e^{jkw_o t}\]

<h3 id="discrete-time-fourier-series">Discrete-Time Fourier Series</h3>

\[x[n] = \sum_{k=&lt;N&gt;}^{} X[k] e^{jk\Omega_o n}\]

<h3 id="fourier-transform">Fourier Transform</h3>

\[x(t) = \frac{1}{2\pi}\int_{-\infty}^{\infty} X(jw)e^{jwt} \,dw\]

<h3 id="discrete-time-fourier-transform">Discrete-Time Fourier Transform</h3>

\[x[n] = \frac{1}{2\pi}\int_{2\pi}^{} X(e^{j\Omega})e^{j\Omega n} \,d\Omega\]

<p>나와 같은 테크를 탄 공대생이라면 기존에 배운 푸리에 어쩌고의 개념은 위 공식과 함께 time domain에 있는 신호를 freq domain으로 convert해주는 것이라고 알고 있을 것이다. 그 배경에는 laplace 변환에서 시작해서 LTI system 등등 여러 개념들이 등장하지만 일단 이 포스트에서는 그부분까지 다루지는 않겠다.</p>

<p>그런데, 사실 큰 수의 곱셈을 할 때도 쓰인다는 것을 알고 있을까? 일단 나는 몰랐다! 이제부터 이쪽에 초점을 맞춰서 살펴보자.</p>

<h2 id="다항식-곱셈에서의-fourier-transform">다항식 곱셈에서의 Fourier Transform</h2>

<p>아래 두 polynomial을 곱하는데에는 Time Complexity가 어떻게 될까?</p>

\[\begin{align} A(x) &amp;= a_0 + a_1x + \ldots + a_nx^n \\ B(x) &amp;= b_0 + b_1x + \ldots + b_m x^m\end{align}\]

<p>물론 ${O(nm)}$일 것이다. 우리는 두가지 방법으로 곱해진 결과 polynomial ${C(x)}$을 구할 수 있는데,</p>

<ol>
  <li>직접 곱한다.</li>
  <li>각 polynomial에서 ${n+m}$개 point ${x_i}$를 뽑아서 각 ${A(x_i)B(x_i)}$를 통해 ${c_i}$들을 알아낸다.</li>
</ol>

<p>보통 첫번째 방법으로 구현을 할텐데, 두번째 방법은 뭔가 달라보인다. 먼저, 각 point를 얻어내는데 ${O(n+m)}$이 걸릴테고, 다음으로 곱하는데 ${O(1)}$이 필요하다. 하지만, ${n + m}$ point에 대해 반복해야하므로 결국 complextiy는 제곱을 유지한다. 그렇다면, point를 구하는 complexity를 줄이면 어떻게 해볼 수 있지 않을까? 이를테면 우함수의 대칭성과 같은 성질을 통해서 말이다. 아래 예시를 살펴보자.</p>

\[\begin{align} A(x) &amp;= x^8 + x^2 + 1 \\ B(x) &amp;= x^4 + x^2 \end{align}\]

<p>이렇게 주어졌다면, 좀 더 쉽게 곱할 방법이 얼핏 보인다. 둘다 우함수이므로, 곱한 결과도 우함수 꼴로 주어질 것이므로, ${x^12, x^10,x^6, x^4, x^2, x^0}$의 계수만 0이 아닌 값을 가질 것이다. 벌써 변수가 절반 가까이 줄었다. 물론 절반은 complextiy에 별 영향을 주지 못한다. 영향을 주려면 절반을 recursive하게 계속 줄여줘야만 한다. 방법이 없을까?</p>

:ET