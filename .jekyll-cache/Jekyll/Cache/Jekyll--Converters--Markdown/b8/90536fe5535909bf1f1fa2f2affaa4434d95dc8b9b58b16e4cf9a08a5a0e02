I"<blockquote>
  <p>Unreachable Object들은 Garbage Collector에 의해 회수된다.</p>
</blockquote>

<p>위의 내용을 이해하기 위해 JAVA에서의 메모리 관리 방법에 대해 살펴보자. 아래 reference의 흐름을 따라 살을 붙이는 방식으로 작성했다.</p>

<p>일단 간략하게 stack과 heap의 특성을 요약해보자.</p>

<h2 id="stack">Stack</h2>

<ol>
  <li>Heap에 할당된 object들의 reference가 할당된다.</li>
  <li>value type(primitive type)들이 직접 저장된다.</li>
  <li>stack의 변수들은 <strong>특정한 visibility</strong>(scope)가 있다.</li>
  <li>Thread마다 독립 stack 공간을 가진다.</li>
</ol>

<p>scope는 쉽게 말해 변수가 선언된 괄호 단위라고 보면 된다. 소속된 괄호가 닫히면 모두 pop되어 회수된다.</p>

<h2 id="heap">Heap</h2>

<ol>
  <li>실제 object들이 저장되고, stack에 의해 reference 된다.</li>
  <li>process 당 하나의 heap 공간. 즉 Thread들이 공유함.</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">StringBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
</code></pre></div></div>

<p>보통 위와 같은 방법으로 object를 생성하는데, 이때 new 키워드가 heap에 충분한 공간이 있는지 확인하고 생성한다.</p>

<h2 id="생각해볼것">생각해볼것</h2>

<h3 id="사례-1">사례 1</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">test</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">"jaehyun"</span><span class="o">;</span>
        <span class="n">oneFunction</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
<span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">oneFunction</span><span class="o">(</span><span class="nc">String</span> <span class="n">param</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">param</span> <span class="o">+=</span> <span class="s">" kim"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이걸 실행하면 다음과 같은 과정이 일어난다.</p>

<ol>
  <li>힙에 <code class="language-plaintext highlighter-rouge">"jaehyun"</code> 오브젝트가 생성되고 s가 스택영역에서 이를 reference한다.</li>
  <li><code class="language-plaintext highlighter-rouge">oneFunction</code> 함수를 실행하며 param 변수가 <code class="language-plaintext highlighter-rouge">"jaehyun"</code>오브젝트를 같이 reference하도록 한다.</li>
  <li>함수안에서 <code class="language-plaintext highlighter-rouge">+</code>연산을 수행하므로, heap공간에 새로운 공간을 할당하고 새로운 string 오브젝트 <code class="language-plaintext highlighter-rouge">"jaehyun kim"</code>이 생성된다. param은 이걸 refer하고 있다.</li>
  <li>함수가 종료되면 <code class="language-plaintext highlighter-rouge">"jaehyun kim"</code>을 reference하던 param변수가 스택에서 pop되고, 결국 heap에 저장된 <code class="language-plaintext highlighter-rouge">"jaehyun kim"</code>을 refer하는 변수가 없어졌으므로 garbage가 되어 회수된다.</li>
  <li>하지만, s변수는 처음부터 계속 <code class="language-plaintext highlighter-rouge">"jaehyun"</code>을 refer하고 있었으므로, 그상태 그대로 남아있다.</li>
</ol>

<p>ok, string연산이 저렇게 되니 이번 경우는 인정이다. 그렇다면 자연스럽에 아래와 같은 경우에 대한 의문이 생긴다.</p>

<h3 id="사례-2">사례 2</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">test</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
        <span class="n">changeInteger</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">changeInteger</span><span class="o">(</span><span class="nc">Integer</span> <span class="n">param</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">param</span> <span class="o">+=</span> <span class="mi">10</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>이제는 진짜 반영이 될까? 안타깝게도 그렇지 않다. 계속해서 <code class="language-plaintext highlighter-rouge">10</code>만 출력될 뿐이다.</p>

<h3 id="사례-3">사례 3</h3>

<p>아래처럼 계속 생성하면 어떻게 될까?</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">x</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="s">"ABC"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>일단 지금까지 배운 내용으로 위를 해석해보자.</p>

<p><code class="language-plaintext highlighter-rouge">"ABC"</code>는 object이므로 이 string은 heap 어딘가에 저장되어 각각 <code class="language-plaintext highlighter-rouge">x</code>라는 stack에 있는 변수에 의해 reference 되어 있다.</p>

<p>그렇다면 언젠가 memory error가 뜰까?</p>

<p>그렇지는 않다. 우리의 <strong>Garbage Collector</strong>가 열일해서 다 회수했기 때문이다. (자세히 보면 이전에 생성된 object에 일반적인 방법으로는 접근할 수 있는 방법이 없을을 볼 수 있다.)</p>

<h2 id="references">references</h2>

<p><a href="https://dzone.com/articles/java-memory-management">DZone</a></p>
:ET